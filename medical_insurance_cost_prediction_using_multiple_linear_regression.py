# -*- coding: utf-8 -*-
"""Medical Insurance Cost Prediction Using Multiple Linear Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1REKDneOCmFjnc0r8EGK0jU2GvRjDnKr_

# Medical Insurance Cost Prediction Using Multiple Linear Regression

## Imports
"""

import pandas as pd
import numpy as np
import requests
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""## Fetch the dataset"""

url = "https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv"
response = requests.get(url)
with open('insurance.csv', 'wb') as file:
    file.write(response.content)

"""## Load the dataset"""

df = pd.read_csv('insurance.csv')

"""## Preprocess the data"""

# Convert categorical variables into dummy/indicator variables
df = pd.get_dummies(df)

# Prepare features and target variable
X = df.drop('charges', axis=1)
y = df['charges']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## Model Training"""

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

"""## Evaluate the model"""

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

"""## Saving the model"""

import joblib
joblib.dump(model, 'medical_cost_model.pkl')

"""## Prediction for 1 value"""

# Example single data point
data_point = {
    'age': 28,
    'sex': 'female',
    'bmi': 26.2,
    'children': 2,
    'smoker': 'yes',
    'region': 'southwest'
}

# Convert to DataFrame
single_df = pd.DataFrame([data_point])

# Preprocess the single data point
single_df = pd.get_dummies(single_df)

# Ensure single_df has the same columns as the training data
columns = X_train.columns
single_df = single_df.reindex(columns=columns, fill_value=0)

# Load the trained model
model = joblib.load('medical_cost_model.pkl')

# Predict the medical insurance cost
prediction = model.predict(single_df)
print(f"Predicted medical insurance cost: {prediction[0]}")